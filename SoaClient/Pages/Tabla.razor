@page "/Tabla"
@using SoaClient.Models
@using Blazor.Extensions.Canvas.Canvas2D
@using Blazor.Extensions
@inject EcuacionService EqServ

<article class="container-fluid">
    <div class="row">
        <div class="col-6">
            <section class="row text-center justify-content-center">
                <h4 class="col-11">Generar una tabla de valores para la Ecuación</h4>
            </section>
            <section class="row justify-content-center text-center">
                <h2 class="col-11"><b>f(x)=ax**2+bx+c</b></h2>
            </section>
            <EditForm Model="@form" OnValidSubmit="@Submit">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <ValidationSummary></ValidationSummary>
                <section class="row justify-content-center text-center">
                    <div class="col-11">
                        <div class="row">
                            <label for="eq" class="col col-form-label">Ingresar la ecuación:</label>
                            <InputText @bind-Value="form.Eq" class="form-control col" style="width: 10em;" id="eq" name="eq"></InputText>
                        </div>
                    </div>
                </section>
                <section class="row justify-content-center text-center">
                    <button type="submit" class="col-4 btn">Calcular</button>
                </section>
            </EditForm>
            <section class="row justify-content-center text-center">
                <button class="col-4 btn" data-bs-toggle="modal" data-bs-target="#Graficar" disabled="@(!issubmit)" @onclick="Draw">Graficar</button>
            </section>
        </div>
        <div class="col-6 text-center">
            <div class="row justify-content-center align-items-center">
                <section class="col-10">
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">X</th>
                                <th scope="col">f(x)</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (tabla != null)
                            {
                                @for (int i = 0; i < 30; i++)
                                {
                                <tr>
                                    <th scope="row">@i</th>
                                    <td>@tabla.ToArray()[0].ToArray()[i]</td>
                                    <td>@tabla.ToArray()[1].ToArray()[i]</td>
                                </tr>
                                }
                            }
                        </tbody>
                    </table>
                </section>
            </div>
        </div>
    </div>
</article>

<div class="modal fade" id="Graficar" tabindex="-1" aria-labelledby="GraficarLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="GraficarLabel">Graficar</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <div class="container-fluid">
                    <div class="row justify-content-center">
                        <BECanvas Width="480" Height="480" @ref="_canvasReference"></BECanvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private EcuacionForm form = new();

    private ICollection<ICollection<double>> tabla;

    private Boolean issubmit = false;

    private Canvas2DContext _context;

    protected BECanvasComponent _canvasReference;

    private async Task Submit()
    {
        EqServ.Ecuacion = form.Eq;
        tabla = await EqServ.CalcularTablaDeValores();
        issubmit = true;
    }

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(EqServ.Ecuacion)) form.Eq = EqServ.Ecuacion;
        issubmit = false;
        base.OnInitialized();
    }

    private async Task Draw()
    {
        this._context = await this._canvasReference.CreateCanvas2DAsync();
        await this._context.FillRectAsync(240, 0, 5, 480);
        await this._context.FillRectAsync(0, 240, 480, 5);
        await this._context.SetFillStyleAsync("red");
        var tb = await EqServ.CalcularTablaDeValoresXl();
        for (int i = 0; i < tb.ToArray()[0].Count; i++)
        {
            var x = tb.ToArray()[0].ToArray()[i];
            var y = tb.ToArray()[1].ToArray()[i];
            x *= 15;
            y *= 15;
            x += 240;
            y -= 240;
            await this._context.FillRectAsync(x, -y, 2, 2);
        }
        await this._context.SetFillStyleAsync("black");

    }
}
